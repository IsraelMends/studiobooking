name: iOS Build

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14
    timeout-minutes: 60
    env:
      IOS_DIR: ios                 # altere se sua pasta iOS estiver em outro lugar (ex.: app/ios)
      SCHEME: studiobooking        # nome do Scheme/Target do seu app no Xcode

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Seleciona Xcode 16.x (requerido pelas vers√µes recentes do RN)
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Check Xcode version
        run: xcodebuild -version

      - name: Validate iOS folder
        run: |
          if [ ! -d "${{ env.IOS_DIR }}" ]; then
            echo "::error::Directory '${{ env.IOS_DIR }}' not found at repo root."
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Instala depend√™ncias JS (Yarn ou npm) ANTES do pod install
      - name: Install JS deps (Yarn)
        if: ${{ hashFiles('yarn.lock') != '' }}
        run: yarn install --frozen-lockfile

      - name: Install JS deps (npm)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci

      # Garante o CLI do RN para autolinking (√∫til para Podfile com use_native_modules!/Expo)
      - name: Ensure React Native CLI present for autolinking
        run: |
          if [ -f "yarn.lock" ]; then
            yarn add -D @react-native-community/cli
          elif [ -f "package-lock.json" ]; then
            npm i -D @react-native-community/cli
          else
            (yarn add -D @react-native-community/cli) || npm i -D @react-native-community/cli
          fi

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ${{ env.IOS_DIR }}/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles(format('{0}/Podfile.lock', env.IOS_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-pods-
      
      - name: Verify Expo autolinking presence
        run: |
          echo "Listing node_modules entries related to expo:"
          ls -la node_modules | grep expo || true
          if [ ! -f "node_modules/expo-modules-autolinking/scripts/autolinking.rb" ] && [ ! -f "node_modules/expo-modules-autolinking/scripts/autolinking" ]; then
            echo "::warning ::expo-modules-autolinking not found; Podfile will skip Expo autolinking."
          fi


      - name: Install CocoaPods
        run: pod install --repo-update
        working-directory: ${{ env.IOS_DIR }}

      # --- Build opcional: habilite quando quiser gerar .ipa ---
      - name: Build .ipa (xcodebuild)
        if: ${{ true }}  # deixe true se quiser realmente buildar agora
        working-directory: ${{ env.IOS_DIR }}
        env:
          SCHEME: ${{ env.SCHEME }}
        run: |
          set -euo pipefail
          set -x

          echo "üìÅ Conte√∫do de $(pwd):"
          ls -la

          echo "üîé Procurando *.xcworkspace e *.xcodeproj na raiz de ios/"
          /usr/bin/find . -maxdepth 1 -name "*.xcworkspace" -print
          /usr/bin/find . -maxdepth 1 -name "*.xcodeproj" -print

          # 1) Descobrir workspace OU projeto (sem cair em contents.xcworkspacedata)
          WORKSPACE="$(
            /usr/bin/find . -maxdepth 1 -type d -name '*.xcworkspace' -print -quit || true
          )"
          PROJECT="$(
            /usr/bin/find . -maxdepth 1 -type d -name '*.xcodeproj' -print -quit || true
          )"

          if [ -n "$WORKSPACE" ]; then
            echo "‚û°Ô∏è Usando workspace: $WORKSPACE"
            BUILD_FLAG=(-workspace "$WORKSPACE")
          elif [ -n "$PROJECT" ]; then
            echo "‚û°Ô∏è Workspace n√£o encontrado. Usando projeto: $PROJECT"
            BUILD_FLAG=(-project "$PROJECT")
          else
            echo "::error ::Nenhum .xcworkspace ou .xcodeproj encontrado em $(pwd)."
            echo "Dica: confirme que o 'pod install' rodou e gerou o workspace, ou que o .xcodeproj existe."
            exit 1
          fi

          # 2) Validar o Scheme
          if [ -z "${SCHEME:-}" ]; then
            echo "::error ::Vari√°vel SCHEME n√£o definida. Configure env.SCHEME no job."
            exit 1
          fi
          echo "‚û°Ô∏è Usando scheme: ${SCHEME}"

          # 3) Sa√≠da
          OUT_DIR="$PWD/build"
          mkdir -p "$OUT_DIR"

          # 4) Archive
          /Applications/Xcode_16.2.app/Contents/Developer/usr/bin/xcodebuild \
            "${BUILD_FLAG[@]}" \
            -scheme "${SCHEME}" \
            -configuration Release \
            -sdk iphoneos \
            -archivePath "$OUT_DIR/${SCHEME}.xcarchive" archive \
            CODE_SIGNING_ALLOWED=NO

          # 5) Export IPA (se houver exportOptions.plist)
          if [ -f "exportOptions.plist" ]; then
            /Applications/Xcode_16.2.app/Contents/Developer/usr/bin/xcodebuild \
              -exportArchive \
              -archivePath "$OUT_DIR/${SCHEME}.xcarchive" \
              -exportOptionsPlist "exportOptions.plist" \
              -exportPath "$OUT_DIR"
          else
            echo "::warning ::exportOptions.plist n√£o encontrado. Pulando export do .ipa."
          fi



      - name: Upload IPA
        if: ${{ true }}  # habilite junto com o step de build
        uses: actions/upload-artifact@v4
        with:
          name: app-release.ipa
          path: ${{ env.IOS_DIR }}/build/*.ipa
