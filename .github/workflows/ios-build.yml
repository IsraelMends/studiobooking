name: iOS Build

on:
  workflow_dispatch:
  pull_request:
    branches: [ main ]

jobs:
  ios:
    runs-on: macos-14
    timeout-minutes: 60
    env:
      IOS_DIR: ios                 # altere se sua pasta iOS estiver em outro lugar (ex.: app/ios)
      SCHEME: studiobooking        # nome do Scheme/Target do seu app no Xcode

    steps:
      - name: Checkout
        uses: actions/checkout@v4

      # Seleciona Xcode 16.x (requerido pelas versões recentes do RN)
      - name: Select Xcode 16
        uses: maxim-lobanov/setup-xcode@v1
        with:
          xcode-version: '16.2'

      - name: Check Xcode version
        run: xcodebuild -version

      - name: Validate iOS folder
        run: |
          if [ ! -d "${{ env.IOS_DIR }}" ]; then
            echo "::error::Directory '${{ env.IOS_DIR }}' not found at repo root."
            exit 1
          fi

      - name: Setup Node
        uses: actions/setup-node@v4
        with:
          node-version: 20

      # Instala dependências JS (Yarn ou npm) ANTES do pod install
      - name: Install JS deps (Yarn)
        if: ${{ hashFiles('yarn.lock') != '' }}
        run: yarn install --frozen-lockfile

      - name: Install JS deps (npm)
        if: ${{ hashFiles('package-lock.json') != '' }}
        run: npm ci

      # Garante o CLI do RN para autolinking (útil para Podfile com use_native_modules!/Expo)
      - name: Ensure React Native CLI present for autolinking
        run: |
          if [ -f "yarn.lock" ]; then
            yarn add -D @react-native-community/cli
          elif [ -f "package-lock.json" ]; then
            npm i -D @react-native-community/cli
          else
            (yarn add -D @react-native-community/cli) || npm i -D @react-native-community/cli
          fi

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.2'

      - name: Cache CocoaPods
        uses: actions/cache@v4
        with:
          path: ${{ env.IOS_DIR }}/Pods
          key: ${{ runner.os }}-pods-${{ hashFiles(format('{0}/Podfile.lock', env.IOS_DIR)) }}
          restore-keys: |
            ${{ runner.os }}-pods-

      - name: Install CocoaPods
        run: pod install --repo-update
        working-directory: ${{ env.IOS_DIR }}

      # --- Build opcional: habilite quando quiser gerar .ipa ---
      - name: Build .ipa (xcodebuild)
        if: ${{ false }}  # troque para true quando estiver pronto para buildar
        working-directory: ${{ env.IOS_DIR }}
        run: |
          set -euo pipefail
          WORKSPACE="$(ls *.xcworkspace | head -n1)"
          xcodebuild -workspace "$WORKSPACE" \
                     -scheme "${SCHEME}" \
                     -configuration Release \
                     -sdk iphoneos \
                     -archivePath "$PWD/build/${SCHEME}.xcarchive" archive \
                     CODE_SIGNING_ALLOWED=NO
          xcodebuild -exportArchive \
                     -archivePath "$PWD/build/${SCHEME}.xcarchive" \
                     -exportOptionsPlist exportOptions.plist \
                     -exportPath "$PWD/build"

      - name: Upload IPA
        if: ${{ false }}  # habilite junto com o step de build
        uses: actions/upload-artifact@v4
        with:
          name: app-release.ipa
          path: ${{ env.IOS_DIR }}/build/*.ipa
